// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class StormController {
  Future<void> start({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStartConstMeta;

  Future<void> createAccount(
      {required int num1, required int num2, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateAccountConstMeta;

  Future<void> createAlias({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateAliasConstMeta;

  Future<void> login(
      {required String username, required String password, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoginConstMeta;

  Future<void> getGroups({required int alias, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetGroupsConstMeta;

  Future<void> getGroupMessages({required int group, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetGroupMessagesConstMeta;

  Future<void> sendGroupMessage(
      {required int group, required String msg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendGroupMessageConstMeta;

  Future<void> setGroupSettings(
      {required int group, required String msg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetGroupSettingsConstMeta;
}

class StormControllerImpl extends FlutterRustBridgeBase<StormControllerWire>
    implements StormController {
  factory StormControllerImpl(ffi.DynamicLibrary dylib) =>
      StormControllerImpl.raw(StormControllerWire(dylib));

  StormControllerImpl.raw(StormControllerWire inner) : super(inner);

  Future<void> start({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_start(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: kStartConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "start",
        argNames: [],
      );

  Future<void> createAccount(
          {required int num1, required int num2, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_createAccount(
            port_, _api2wire_u8(num1), _api2wire_u8(num2)),
        parseSuccessData: _wire2api_unit,
        constMeta: kCreateAccountConstMeta,
        argValues: [num1, num2],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCreateAccountConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "createAccount",
        argNames: ["num1", "num2"],
      );

  Future<void> createAlias({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_createAlias(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: kCreateAliasConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCreateAliasConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "createAlias",
        argNames: [],
      );

  Future<void> login(
          {required String username, required String password, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_login(
            port_, _api2wire_String(username), _api2wire_String(password)),
        parseSuccessData: _wire2api_unit,
        constMeta: kLoginConstMeta,
        argValues: [username, password],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kLoginConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "login",
        argNames: ["username", "password"],
      );

  Future<void> getGroups({required int alias, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_getGroups(port_, _api2wire_u16(alias)),
        parseSuccessData: _wire2api_unit,
        constMeta: kGetGroupsConstMeta,
        argValues: [alias],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetGroupsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "getGroups",
        argNames: ["alias"],
      );

  Future<void> getGroupMessages({required int group, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_getGroupMessages(port_, _api2wire_u16(group)),
        parseSuccessData: _wire2api_unit,
        constMeta: kGetGroupMessagesConstMeta,
        argValues: [group],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetGroupMessagesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "getGroupMessages",
        argNames: ["group"],
      );

  Future<void> sendGroupMessage(
          {required int group, required String msg, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_sendGroupMessage(
            port_, _api2wire_u16(group), _api2wire_String(msg)),
        parseSuccessData: _wire2api_unit,
        constMeta: kSendGroupMessageConstMeta,
        argValues: [group, msg],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSendGroupMessageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sendGroupMessage",
        argNames: ["group", "msg"],
      );

  Future<void> setGroupSettings(
          {required int group, required String msg, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_setGroupSettings(
            port_, _api2wire_u16(group), _api2wire_String(msg)),
        parseSuccessData: _wire2api_unit,
        constMeta: kSetGroupSettingsConstMeta,
        argValues: [group, msg],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSetGroupSettingsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "setGroupSettings",
        argNames: ["group", "msg"],
      );

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_u16(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
void _wire2api_unit(dynamic raw) {
  return;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class StormControllerWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  StormControllerWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  StormControllerWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_start(
    int port_,
  ) {
    return _wire_start(
      port_,
    );
  }

  late final _wire_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_start');
  late final _wire_start = _wire_startPtr.asFunction<void Function(int)>();

  void wire_createAccount(
    int port_,
    int num1,
    int num2,
  ) {
    return _wire_createAccount(
      port_,
      num1,
      num2,
    );
  }

  late final _wire_createAccountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Uint8, ffi.Uint8)>>('wire_createAccount');
  late final _wire_createAccount =
      _wire_createAccountPtr.asFunction<void Function(int, int, int)>();

  void wire_createAlias(
    int port_,
  ) {
    return _wire_createAlias(
      port_,
    );
  }

  late final _wire_createAliasPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_createAlias');
  late final _wire_createAlias =
      _wire_createAliasPtr.asFunction<void Function(int)>();

  void wire_login(
    int port_,
    ffi.Pointer<wire_uint_8_list> username,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_login(
      port_,
      username,
      password,
    );
  }

  late final _wire_loginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_login');
  late final _wire_login = _wire_loginPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_getGroups(
    int port_,
    int alias,
  ) {
    return _wire_getGroups(
      port_,
      alias,
    );
  }

  late final _wire_getGroupsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint16)>>(
          'wire_getGroups');
  late final _wire_getGroups =
      _wire_getGroupsPtr.asFunction<void Function(int, int)>();

  void wire_getGroupMessages(
    int port_,
    int group,
  ) {
    return _wire_getGroupMessages(
      port_,
      group,
    );
  }

  late final _wire_getGroupMessagesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint16)>>(
          'wire_getGroupMessages');
  late final _wire_getGroupMessages =
      _wire_getGroupMessagesPtr.asFunction<void Function(int, int)>();

  void wire_sendGroupMessage(
    int port_,
    int group,
    ffi.Pointer<wire_uint_8_list> msg,
  ) {
    return _wire_sendGroupMessage(
      port_,
      group,
      msg,
    );
  }

  late final _wire_sendGroupMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint16,
              ffi.Pointer<wire_uint_8_list>)>>('wire_sendGroupMessage');
  late final _wire_sendGroupMessage = _wire_sendGroupMessagePtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_setGroupSettings(
    int port_,
    int group,
    ffi.Pointer<wire_uint_8_list> msg,
  ) {
    return _wire_setGroupSettings(
      port_,
      group,
      msg,
    );
  }

  late final _wire_setGroupSettingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint16,
              ffi.Pointer<wire_uint_8_list>)>>('wire_setGroupSettings');
  late final _wire_setGroupSettings = _wire_setGroupSettingsPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
